#!/bin/bash

while true
do

# Logo

echo "============================================================"
curl -s https://raw.githubusercontent.com/AlekseyMoskalev1/script/main/Noders.sh | bash
echo "============================================================"


PS3='Select an action: '
options=(
"Prepare the server for installation"
"Install full node"
"Run light client"
"Log"
"Exit")
select opt in "${options[@]}"
               do
                   case $opt in
                   
"Prepare the server for installation")
               echo "============================================================"
               echo "Preparation has begun"
               echo "============================================================"
               
sudo apt update && sudo apt upgrade -y
sudo apt install curl tar wget clang pkg-config libssl-dev jq build-essential bsdmainutils git make ncdu -y
ver="1.17.2"
cd $HOME
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"
sudo rm -rf /usr/local/go
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"
rm "go$ver.linux-amd64.tar.gz"
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile
source $HOME/.bash_profile

               echo "============================================================"
               echo "The server is ready!"
               echo "============================================================"
break
;;
            
"Install full node")

cd $HOME
rm -rf celestia-node
git clone https://github.com/celestiaorg/celestia-node.git
cd celestia-node
git checkout v0.1.1
make install

TRUSTED_SERVER="http://localhost:26657"
TRUSTED_HASH=$(curl -s $TRUSTED_SERVER/status | jq -r .result.sync_info.latest_block_hash)
echo $TRUSTED_HASH

echo 'export TRUSTED_SERVER='${TRUSTED_SERVER} >> $HOME/.bash_profile
echo 'export TRUSTED_HASH='${TRUSTED_HASH} >> $HOME/.bash_profile
source $HOME/.bash_profile

celestia full init --core.remote $TRUSTED_SERVER --headers.trusted-hash $TRUSTED_HASH

sed -i.bak -e 's/PeerExchange = false/PeerExchange = true/g' $HOME/.celestia-full/config.toml

sudo tee /etc/systemd/system/celestia-full.service > /dev/null <<EOF
[Unit]
  Description=celestia-full node
  After=network-online.target
[Service]
  User=$USER
  ExecStart=$(which celestia) full start
  Restart=on-failure
  RestartSec=10
  LimitNOFILE=4096
[Install]
  WantedBy=multi-user.target
EOF

sudo systemctl enable celestia-full
sudo systemctl daemon-reload

sudo systemctl restart celestia-full && sleep 10 && journalctl -u celestia-full -o cat -n 10000 --no-pager | grep -m 1 "*  /ip4/" > $HOME/multiaddress.txt

FULL_NODE_IP=$(cat $HOME/multiaddress.txt | sed -r 's/^.{3}//')
echo 'export FULL_NODE_IP='${FULL_NODE_IP} >> $HOME/.bash_profile
source $HOME/.bash_profile

               echo "============================================================"
               echo "Installation complete!"
               echo "============================================================"
break
;;

"Run light client")

curl -s localhost:26657/status | jq .result.sync_info

rm -rf $HOME/.celestia-light
celestia light init --headers.trusted-peer $FULL_NODE_IP --headers.trusted-hash $TRUSTED_HASH

port=2122
sed -i.bak -e "s|ListenAddresses *=.*|ListenAddresses = \[\"/ip4/0.0.0.0/tcp/$port\", \"/ip6/::/tcp/$port\"\]|" $HOME/.celestia-light/config.toml
sed -i.bak -e "s|NoAnnounceAddresses *=.*|NoAnnounceAddresses = \[\"/ip4/0.0.0.0/tcp/$port\", \"/ip4/127.0.0.1/tcp/$port\", \"/ip6/::/tcp/$port\"\]|" $HOME/.celestia-light/config.toml

sudo tee /etc/systemd/system/celestia-light.service > /dev/null <<EOF
[Unit]
  Description=celestia-light
  After=network-online.target
[Service]
  User=$USER
  ExecStart=$(which celestia) light start
  Restart=on-failure
  RestartSec=10
  LimitNOFILE=4096
[Install]
  WantedBy=multi-user.target
EOF

sudo systemctl enable celestia-light
sudo systemctl daemon-reload
sudo systemctl restart celestia-light

break
;;

"Log")

journalctl -u celestia-light -f -o cat

break
;;

"Exit")
exit
;;

*) echo "invalid option $REPLY";;
esac
done
done
