#!/bin/bash

while true
do

# Logo

echo "============================================================"
curl -s https://raw.githubusercontent.com/AlekseyMoskalev1/script/main/Noders.sh | bash
echo "============================================================"


PS3='Select an action: '
options=("Prepare the server for installation" "Install APPD-Node" "Install Full Node" "Install Light Client(Do not install with a full node on the same server)" "Log APPD-Node" "Log Full" "Log Light" "Check node status" "Request for tokens in Discord" "Balance" "Create validator" "Check validator" "Parametrs"  "Exit")
select opt in "${options[@]}"
               do
                   case $opt in
                   
"Prepare the server for installation")
               echo "============================================================"
               echo "Preparation has begun"
               echo "============================================================"
               
sudo apt update && sudo apt upgrade -y
sudo apt install curl tar wget clang pkg-config libssl-dev jq build-essential bsdmainutils git make ncdu -y

cd $HOME
ver="1.17.2"
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"
sudo rm -rf /usr/local/go
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"
rm "go$ver.linux-amd64.tar.gz"
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile
source $HOME/.bash_profile
go version

               echo "============================================================"
               echo "The server is ready!"
               echo "============================================================"
break
;;
            
"Install APPD-Node")
NODERS_NODE="[NODERS]"
                echo "============================================================"
                echo "Set parameters"
                echo "============================================================"
                echo "Enter NodName:"
                echo "============================================================"
                
read CELESTIA_NODENAME
CELESTIA_NODENAME=$CELESTIA_NODENAME$NODERS_NODE
echo 'export CELESTIA_NODENAME='${CELESTIA_NODENAME} >> $HOME/.bash_profile

                echo "============================================================"
                echo "Enter WalletName:"
                echo "============================================================"
               
read CELESTIA_WALLET
CELESTIA_WALLET=$CELESTIA_WALLET$NODERS_NODE
echo 'export CELESTIA_WALLET='${CELESTIA_WALLET} >> $HOME/.bash_profile
CELESTIA_CHAIN="devnet-2"
echo 'export CELESTIA_CHAIN='${CELESTIA_CHAIN} >> $HOME/.bash_profile
. $HOME/.bash_profile
                echo "============================================================"
                echo "Installation started"
                echo "============================================================"

cd $HOME
rm -rf celestia-app
git clone https://github.com/celestiaorg/celestia-app.git
cd celestia-app/
git checkout 63519ec
make install

celestia-appd version --long

cd $HOME
rm -rf networks
git clone https://github.com/celestiaorg/networks.git

celestia-appd init $CELESTIA_NODENAME --chain-id $CELESTIA_CHAIN

cp $HOME/networks/devnet-2/genesis.json $HOME/.celestia-app/config/

SEEDS="74c0c793db07edd9b9ec17b076cea1a02dca511f@46.101.28.34:26656"
PEERS="34d4bfec8998a8fac6393a14c5ae151cf6a5762f@194.163.191.41:26656"

sed -i.bak -e "s/^seeds *=.*/seeds = \"$SEEDS\"/; s/^persistent_peers *=.*/persistent_peers = \"$PEERS\"/" $HOME/.celestia-app/config/config.toml

external_address=$(wget -qO- eth0.me)
sed -i.bak -e "s/^external_address = \"\"/external_address = \"$external_address:26656\"/" $HOME/.celestia-app/config/config.toml
sed -i 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $HOME/.celestia-app/config/config.toml

sed -i 's/timeout_commit = "5s"/timeout_commit = "15s"/g' $HOME/.celestia-app/config/config.toml
sed -i 's/index_all_keys = false/index_all_keys = true/g' $HOME/.celestia-app/config/config.toml

sed -i '/\[api\]/{:a;n;/enabled/s/false/true/;Ta};/\[api\]/{:a;n;/enable/s/false/true/;Ta;}' $HOME/.celestia-app/config/app.toml

pruning="custom"
pruning_keep_recent="100"
pruning_keep_every="5000"
pruning_interval="10"

sed -i -e "s/^pruning *=.*/pruning = \"$pruning\"/" $HOME/.celestia-app/config/app.toml
sed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"$pruning_keep_recent\"/" $HOME/.celestia-app/config/app.toml
sed -i -e "s/^pruning-keep-every *=.*/pruning-keep-every = \"$pruning_keep_every\"/" $HOME/.celestia-app/config/app.toml
sed -i -e "s/^pruning-interval *=.*/pruning-interval = \"$pruning_interval\"/" $HOME/.celestia-app/config/app.toml

celestia-appd unsafe-reset-all

wget -O $HOME/.celestia-app/config/addrbook.json "https://raw.githubusercontent.com/maxzonder/celestia/main/addrbook.json"

celestia-appd config chain-id $CELESTIA_CHAIN
celestia-appd config keyring-backend test

sudo tee /etc/systemd/system/celestia-appd.service > /dev/null <<EOF
[Unit]
  Description=celestia-appd Cosmos daemon
  After=network-online.target
[Service]
  User=$USER
  ExecStart=$(which celestia-appd) start
  Restart=on-failure
  RestartSec=3
  LimitNOFILE=4096
[Install]
  WantedBy=multi-user.target
EOF

sudo systemctl enable celestia-appd
sudo systemctl daemon-reload
sudo systemctl restart celestia-appd

cd $HOME

celestia-appd keys add $CELESTIA_WALLET

CELESTIA_ADDR=$(celestia-appd keys show $CELESTIA_WALLET -a)
echo $CELESTIA_ADDR
echo 'export CELESTIA_ADDR='${CELESTIA_ADDR} >> $HOME/.bash_profile

CELESTIA_VALOPER=$(celestia-appd keys show $CELESTIA_WALLET --bech val -a)
echo $CELESTIA_VALOPER
echo 'export CELESTIA_VALOPER='${CELESTIA_VALOPER} >> $HOME/.bash_profile
source $HOME/.bash_profile

               echo "============================================================"
               echo "Installation complete!"
               echo "============================================================"
break
;;

"Check node status")
               echo "============================================================"
               echo "Synchronization status must be false to continue!"
               echo "============================================================"
curl -s localhost:26657/status | jq .result.sync_info

break
;;

"Create validator")
               echo "============================================================"
               echo "Synchronization status must be false to continue!"
               echo "============================================================"
               
celestia-appd tx staking create-validator \
 --amount=1050000celes \
 --pubkey=$(celestia-appd tendermint show-validator) \
 --moniker=$CELESTIA_NODENAME \
 --chain-id=$CELESTIA_CHAIN \
 --commission-rate=0.1 \
 --commission-max-rate=0.2 \
 --commission-max-change-rate=0.01 \
 --min-self-delegation=1000000 \
 --from=$CELESTIA_WALLET
break
;;

"Install Full Node")
               echo "============================================================"
               echo "Installation started"
               echo "============================================================"

cd $HOME
rm -rf celestia-node
git clone https://github.com/celestiaorg/celestia-node.git
cd celestia-node
git checkout v0.2.0
make install

TRUSTED_SERVER=$(curl -s "https://raw.githubusercontent.com/maxzonder/celestia/main/trusted_server.txt")
TRUSTED_SERVER="http://$TRUSTED_SERVER"

celestia bridge init --core.remote $TRUSTED_SERVER

sed -i.bak -e 's/PeerExchange = false/PeerExchange = true/g' $HOME/.celestia-bridge/config.toml

BootstrapPeers="[\"/dns4/andromeda.celestia-devops.dev/tcp/2121/p2p/12D3KooWKvPXtV1yaQ6e3BRNUHa5Phh8daBwBi3KkGaSSkUPys6D\", \"/dns4/libra.celestia-devops.dev/tcp/2121/p2p/12D3KooWK5aDotDcLsabBmWDazehQLMsDkRyARm1k7f1zGAXqbt4\", \"/dns4/norma.celestia-devops.dev/tcp/2121/p2p/12D3KooWHYczJDVNfYVkLcNHPTDKCeiVvRhg8Q9JU3bE3m9eEVyY\"]"

sed -i -e "s|BootstrapPeers *=.*|BootstrapPeers = $BootstrapPeers|" $HOME/.celestia-bridge/config.toml

sudo tee /etc/systemd/system/celestia-bridge.service > /dev/null <<EOF
[Unit]
  Description=celestia-bridge
  After=network-online.target
[Service]
  User=$USER
  ExecStart=$(which celestia) bridge start
  Restart=on-failure
  RestartSec=10
  LimitNOFILE=4096
[Install]
  WantedBy=multi-user.target
EOF

sudo systemctl enable celestia-bridge
sudo systemctl daemon-reload

sudo systemctl restart celestia-bridge

break
;;

"Install Light Client(Do not install with a full node on the same server)")

cd $HOME
rm -rf celestia-node
git clone https://github.com/celestiaorg/celestia-node.git
cd celestia-node
git checkout v0.2.0
make install

celestia version

celestia light init

BootstrapPeers="[\"/dns4/andromeda.celestia-devops.dev/tcp/2121/p2p/12D3KooWKvPXtV1yaQ6e3BRNUHa5Phh8daBwBi3KkGaSSkUPys6D\", \"/dns4/libra.celestia-devops.dev/tcp/2121/p2p/12D3KooWK5aDotDcLsabBmWDazehQLMsDkRyARm1k7f1zGAXqbt4\", \"/dns4/norma.celestia-devops.dev/tcp/2121/p2p/12D3KooWHYczJDVNfYVkLcNHPTDKCeiVvRhg8Q9JU3bE3m9eEVyY\"]"

sed -i -e "s|BootstrapPeers *=.*|BootstrapPeers = $BootstrapPeers|" $HOME/.celestia-light/config.toml

sudo tee /etc/systemd/system/celestia-light.service > /dev/null <<EOF
[Unit]
  Description=celestia-light
  After=network-online.target
[Service]
  User=$USER
  ExecStart=$(which celestia) light start
  Restart=on-failure
  RestartSec=10
  LimitNOFILE=4096
[Install]
  WantedBy=multi-user.target
EOF

sudo systemctl enable celestia-light
sudo systemctl daemon-reload
sudo systemctl restart celestia-light

break
;;


"Parametrs")
               echo "============================================================"
               echo "Your parameters"
               echo "============================================================"
echo $CELESTIA_NODENAME $CELESTIA_CHAIN $CELESTIA_WALLET
break
;;

"Balance")
               echo "============================================================"
               echo "Your balance"
               echo "============================================================"
celestia-appd q bank balances $CELESTIA_ADDR              
               echo "Your address: " 
               echo $CELESTIA_ADDR
               echo "============================================================"
break
;;

"Check validator") 

celestia-appd q staking validator $CELESTIA_VALOPER

break
;;

"Request for tokens in Discord")

               echo "============================================================"
               echo "To request tokens, you need to go to the Discord server in the
               fauccet channel and request tokens.
               Server in Discord - https://discord.com/invite/NEfhSscRSx"
               echo "============================================================"
               echo -e "Copy and paste this \033[32m !faucet $CELESTIA_ADDR \033[37m"
               echo "============================================================"

break
;;

"Log APPD-Node")

journalctl -u celestia-appd.service -f

break
;;

"Log Full")

journalctl -u celestia-bridge -o cat -f

break
;;

"Log Light")

journalctl -u celestia-light -f -o cat

break
;;

"Exit")
exit
;;

*) echo "invalid option $REPLY";;
esac
done
done
