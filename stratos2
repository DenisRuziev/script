#!/bin/bash

while true
do

# Logo

                echo "============================================================"
                curl -s https://raw.githubusercontent.com/AlekseyMoskalev1/script/main/Noders.sh | bash
                echo "============================================================"
NODERS_NODE="[NODERS]"
# Prepearing

function preparing {
sudo apt-get update && sudo apt-get upgrade -y
sudo apt-get install git curl build-essential gcc jq snapd --yes
                }

# Install

function install {
mkdir $HOME/stratos; cd $HOME/stratos; \
wget https://github.com/stratosnet/stratos-chain/releases/download/v0.6.1/stchaincli && \
wget https://github.com/stratosnet/stratos-chain/releases/download/v0.6.1/stchaind
chmod +x * && mv * /usr/bin/ && cd
echo "export NODENAME_STRATOS="$NODENAME_STRATOS"" >> $HOME/.bashrc
source $HOME/.bashrc
stchaind init $NODENAME_STRATOS
rm $HOME/.stchaind/config/genesis*; \
wget -O $HOME/.stchaind/config/genesis.json https://raw.githubusercontent.com/stratosnet/stratos-chain-testnet/main/genesis.json; \
wget -O $HOME/.stchaind/config/config.toml https://raw.githubusercontent.com/stratosnet/stratos-chain-testnet/main/config.toml
sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \
\"62abe9adad2c079423cee48d697b94568d0da0b0@143.198.136.75:26656,\
d12cd591f7062aa11bf94e79578647e2cac26b86@18.178.110.255:26656,\
d12cd591f7062aa11bf94e79578647e2cac26b86@18.178.110.255:26656\"/" \
$HOME/.stchaind/config/config.toml
pruning="custom" && \
pruning_keep_recent="50" && \
pruning_keep_every="1000" && \
pruning_interval="30" && \
sed -i -e "s/^pruning *=.*/pruning = \"$pruning\"/" $HOME/.stchaind/config/app.toml && \
sed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"$pruning_keep_recent\"/" $HOME/.stchaind/config/app.toml && \
sed -i -e "s/^pruning-keep-every *=.*/pruning-keep-every = \"$pruning_keep_every\"/" $HOME/.stchaind/config/app.toml && \
sed -i -e "s/^pruning-interval *=.*/pruning-interval = \"$pruning_interval\"/" $HOME/.stchaind/config/app.toml
}

function delete {
                echo "============================================================"
                echo "Removal started"
                echo "============================================================"

sudo systemctl stop stratosd; sudo systemctl disable stratosd
sudo rm -Rvf $HOME/.stchaind $HOME/.stchaincli \
/usr/bin/stchaincli /usr/bin/stchaind \
$HOME/stratos/stchaind $HOME/stratos/stchaincli
sudo rm -v /etc/systemd/system/stratosd.service; \
sudo systemctl daemon-reload
rm -r ~/stratos
}

function service {

                echo "============================================================"
                echo "Create service"
                echo "============================================================"
		
sudo tee <<EOF >/dev/null /etc/systemd/system/stratosd.service
[Unit]
Description=Stratos Chain Node
After=network-online.target
[Service]
User=$USER
ExecStart=$(which stchaind) start
Restart=on-failure
RestartSec=10
LimitNOFILE=65535
[Install]
WantedBy=multi-user.target
EOF
                }

function start {
sudo systemctl daemon-reload; \
sudo systemctl enable stratosd; \
sudo systemctl restart stratosd
                }
		
#Wallet
                
function wallet {
stchaincli keys add \
--hd-path "m/44'/606'/0'/0/0" \
--keyring-backend=test $NODENAME_STRATOS
                echo "============================================================"
                echo "Write your mnemonic phrase in safe place"
                echo "============================================================"
sleep 10
                }
                
 function recoverWallet {
stchaincli keys add \
--hd-path "m/44'/606'/0'/0/0" \
--keyring-backend=test $NODENAME_STRATOS \
--recover
                }
		
#Address

function addres {
stchaincli keys list \
--keyring-backend=test
               }
	       
#Fauccet and Validator
               
function fauccet {
curl -X POST https://faucet-tropos.thestratos.org/faucet/$WALLET_ADDRESS_STRATOS
               }
               
function createValidator {
stchaincli tx staking create-validator \
--amount="90000000000ustos" \
--pubkey=$(stchaind tendermint show-validator) \
--moniker=$NODENAME_STRATOS \
--website="" \
--identity="" \
--details="" \
--chain-id=tropos-1 \
--commission-max-change-rate="0.1" \
--commission-max-rate="0.5" \
--commission-rate="0.1" \
--min-self-delegation="1" \
--node `cat "$HOME/.stchaind/config/config.toml" \
| grep -oPm1 "(?<=^laddr = \")([^%]+)(?=\")"` \
--gas="auto" \
--gas-adjustment=1.5 \
--gas-prices="0.5ustos" \
--keyring-backend=test \
--from=$NODENAME_STRATOS \
-y

               }
	       
#Info
	       
function info {
stchaincli query staking validator $(stchaincli keys show $NODENAME_STRATOS \
--bech val --address --keyring-backend test) \
--trust-node \
--node `cat "$HOME/.stchaind/config/config.toml" \
| grep -oPm1 "(?<=^laddr = \")([^%]+)(?=\")"`
}

function status {
stchaincli status 2>&1 \
--node `cat "$HOME/.stchaind/config/config.toml" \
| grep -oPm1 "(?<=^laddr = \")([^%]+)(?=\")"` \
| jq ."sync_info"."latest_block_height"
stchaincli status 2>&1 \
--node `cat "$HOME/.stchaind/config/config.toml" \
| grep -oPm1 "(?<=^laddr = \")([^%]+)(?=\")"` \
| jq ."sync_info"."catching_up"

                echo "============================================================"
                echo "Node synchronization will end when the status is false"
                echo "============================================================"

}

function balance {
                echo "============================================================"
                echo "The balance will be displayed after the node is fully synchronized"
                echo "============================================================"
stchaincli query account $WALLET_ADDRESS_STRATOS
}

               PS3='Select an action: '
               options=("Prepare the server for installation" "Install node" "Check node status" "Create wallet" "Recover wallet" "Balance" "Create validator" "Exit" "Delete")
               select opt in "${options[@]}"
               do
                   case $opt in
                   
"Prepare the server for installation")
               echo "============================================================"
               echo "Preparation has begun"
               echo "============================================================"
preparing
               echo "============================================================"
               echo "The server is ready!"
               echo "============================================================"
break
;;
            
"Install node")
               echo "============================================================"
               echo "Install has begun"
               echo "============================================================"
	       echo "============================================================"
               echo "Enter your node name: "
               echo "============================================================"

read NODENAME_STRATOS
NODENAME_STRATOS=$NODENAME_STRATOS$NODERS_NODE
echo 'export NODENAME_STRATOS='${NODENAME_STRATOS} >> $HOME/.bash_profile
. $HOME/.bash_profile

source $HOME/.bashrc
install
service
start
      
               echo "============================================================"
               echo "Installation complete!"
               echo "============================================================"
break
;;

"Check node status")
status
break
;;

"Create wallet")
wallet
addres
                echo "============================================================"
                echo "Copy and paste your wallet address: "
                echo "============================================================"
		
read WALLET_ADDRESS_STRATOS >> $HOME/.bash_profile
echo 'export WALLET_ADDRESS_STRATOS='${WALLET_ADDRESS_STRATOS} >> $HOME/.bash_profile
. $HOME/.bash_profile

fauccet
break
;;

"Recover wallet")
recoverWallet
break
;;

"Balance")
balance
break
;;

"Create validator")
createValidator
sleep 5
info
               echo "============================================================"
               echo "Tracking in explorer -
https://explorer-test.thestratos.org/#/validators"
               echo "============================================================"
break	       
;;

"Delete")
               echo "============================================================"
               echo "Removal started"
               echo "============================================================"
	       delete
break
;;

"Exit")
exit
;;
*) echo "invalid option $REPLY";;
esac
done
done
